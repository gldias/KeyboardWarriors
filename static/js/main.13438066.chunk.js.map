{"version":3,"sources":["resources/keyboardWarriorWhite.png","resources/keyboardWarriors.png","resources/badJob.png","resources/sun.svg","resources/night.svg","components/Insult/Insult.tsx","util.ts","components/Timer/Timer.tsx","components/Finish/FinishModal.tsx","TypingPage/TypingPage.tsx","LandingPage/LandingPage.tsx","components/Leaderboard/Leaderboard.tsx","LeaderboardPage/LeaderboardPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","InsultState","Insult","e","preventDefault","nativeEvent","stopImmediatePropagation","state","this","props","tags","COMPLETE","text","UPCOMING","className","CURRENT","i","strikethrough","error","typedText","length","charAt","substring","onCopy","handleCopyAndPaste","onPaste","React","Component","msToTimeString","ms","secs","Math","floor","slice","ceil","Timer","time","timeInMins","interval","setInterval","init","bind","tick","setState","newMils","clearInterval","dark","FinishModal","name","sendStats","playerName","target","value","toUpperCase","params","method","headers","body","JSON","stringify","speed","Date","toLocaleDateString","fetch","Modal","show","Body","alt","src","bad","tabIndex","Row","aria-label","Col","xs","Form","Control","placeholder","onChange","handleFormChange","to","Button","onClick","variant","TypingPage","_timer","currentInsult","isFinished","createRef","textChanged","currentText","currentTarget","insults","current","stop","Navbar","bg","Brand","href","process","logo","width","height","getTimeString","Number","join","getTime","toFixed","Container","ref","map","insult","index","key","autoFocus","toString","LandingPage","document","title","kbWarriorsLightLogo","kbWarriorsLogo","lg","span","offset","Leaderboard","records","generateLeaderboard","then","res","json","ranks","Player","record","ariaLabel","Table","borderless","striped","responsive","LeaderboardPage","prevProps","prevState","snapshot","forceUpdate","Image","App","testState","localStorage","getItem","toggleTheme","setItem","basename","exact","path","onKeyPress","sun","moon","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13438066.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/keyboardWarriorWhite.d6d9d913.png\";","module.exports = __webpack_public_path__ + \"static/media/keyboardWarriors.f043fd9d.png\";","module.exports = __webpack_public_path__ + \"static/media/badJob.81f452a9.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.2c8984b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/night.022dc3c0.svg\";","import React from 'react';\r\nimport \"./Insult.css\";\r\nimport e from 'express';\r\n\r\nexport interface InsultProps {\r\n    text: string;\r\n    typedText: string;\r\n    state: InsultState;\r\n}\r\n\r\n// state indicating whether or not an insult has been typed yet\r\nexport enum InsultState {\r\n    COMPLETE,\r\n    CURRENT,\r\n    UPCOMING \r\n}\r\n\r\n// class representing an insult that a player is asked to type\r\nclass Insult extends React.Component<InsultProps, {state: InsultState}> {\r\n    handleCopyAndPaste(e: React.ClipboardEvent<HTMLDivElement>){\r\n        e.preventDefault();\r\n        e.nativeEvent.stopImmediatePropagation();    \r\n    }\r\n\r\n    render() {\r\n        const {state} = this.props;\r\n        let tags = <></>;\r\n        \r\n        switch(state) {\r\n            case(InsultState.COMPLETE): {\r\n                // strikethrough\r\n                tags = <div><s>{this.props.text}</s></div>;\r\n                break;\r\n            }\r\n            case(InsultState.UPCOMING): {\r\n                // greyed out\r\n                tags = <div className=\"greyed\">{this.props.text}</div>;\r\n                break;\r\n            }\r\n            case(InsultState.CURRENT): {\r\n                let strikethrough = \"\", error = \"\", i;\r\n                let {typedText, text} = this.props;\r\n\r\n                // loop over typed insult\r\n                for(i = 0; i < typedText.length; i++)\r\n                {\r\n                    // if difference, display error character and exit loop\r\n                    if(typedText.charAt(i) !== text.charAt(i))\r\n                    {\r\n                        error = text.charAt(i);\r\n                        i++;\r\n                        break;\r\n                    }\r\n                    else { // if correct, add to strikethrough\r\n                        strikethrough += text.charAt(i);\r\n                    }\r\n                }\r\n\r\n                // create tags\r\n                tags = <div className=\"orngBorder\">\r\n                    <b>\r\n                        <s>{strikethrough}</s>\r\n                        <span className={error === ' ' ? \"redSpace\" : \"red\"}>{error}</span>\r\n                        {text.substring(i)}\r\n                    </b>\r\n                </div>;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div onCopy={this.handleCopyAndPaste} onPaste={this.handleCopyAndPaste} className=\"insult\">\r\n                {tags}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Insult;\r\n","\r\nexport function msToTimeString(ms: number) {\r\n    let secs = Math.floor(ms / 100);\r\n    let mins = Math.floor(secs / 60);\r\n    let secStr = ('0' + (secs % 60)).slice(-2);\r\n    let milStr = ('0' + (Math.ceil((ms % 100) / 10) * 10)).slice(-2);\r\n\r\n    return \"\" + mins + \":\" + secStr + \":\" + milStr;\r\n}","import React from \"react\";\r\nimport \"./timer.css\";\r\nimport { msToTimeString } from \"../../util\";\r\n\r\nexport interface TimerProps {\r\n    dark: boolean;\r\n};\r\n\r\nexport interface TimerState {\r\n    time: number;\r\n    timeInMins: string;\r\n    interval: NodeJS.Timeout;\r\n};\r\n\r\n// Timer that tracks and displays time elapsed since it was created\r\nclass Timer extends React.Component<TimerProps, TimerState> {\r\n    constructor(props: TimerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            time: 0,\r\n            timeInMins: \"0:00:00\",\r\n            interval: setInterval(() => {}, 0)\r\n        };\r\n\r\n        this.init = this.init.bind(this);\r\n        this.tick = this.tick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.init();\r\n    }\r\n\r\n    // initialize interval for timer\r\n    init() {\r\n        this.setState ({ interval: setInterval(this.tick, 10) });\r\n    }\r\n\r\n    // increase the time of the timer and the timer label\r\n    tick() {\r\n        let newMils = this.state.time + 1;\r\n        \r\n        this.setState({\r\n            time: newMils, \r\n            timeInMins: msToTimeString(newMils)\r\n        });\r\n    }\r\n\r\n    // stop the timer\r\n    stop() {\r\n        clearInterval(this.state.interval);\r\n    }\r\n\r\n    // retrieve time elapsed\r\n    getTime() {\r\n        return this.state.time;\r\n    }\r\n\r\n    // retreive time elapsed in a nice format\r\n    getTimeString() {\r\n        return this.state.timeInMins;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"timer\">\r\n                <div className={\"time \" + (this.props.dark ? \"dark-timer\" : \"\")}>{this.state.timeInMins}</div>\r\n                <div className={\"timeLabel \" + (this.props.dark ? \"dark-timer\" : \"\")}>Time Elapsed</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport \"./FinishModal.css\";\r\nimport bad from \"../../resources/badJob.png\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport interface FinishProps{\r\n    speed: number;\r\n    time: string;\r\n    dark: boolean;\r\n}\r\n\r\nexport interface FinishState{\r\n    name: string;\r\n}\r\n\r\nexport class FinishModal extends React.Component<FinishProps,FinishState> {\r\n    constructor(props: FinishProps){\r\n        super(props);\r\n\r\n        this.state = {\r\n            name: \"\"\r\n        };\r\n        \r\n        this.sendStats = this.sendStats.bind(this);\r\n    }\r\n\r\n    handleFormChange(e: any){\r\n        let playerName: string = e.target.value;\r\n        this.setState({\r\n            name: playerName.substring(0,3).toUpperCase(),\r\n        });\r\n    };\r\n\r\n    sendStats() {\r\n        const params: RequestInit = {\r\n            method: \"post\",\r\n            headers: {\"Content-Type\":\"application/json\"},\r\n            body: JSON.stringify({\r\n                \"name\": this.state.name,\r\n                \"speed\": this.props.speed,\r\n                \"date string\": new Date().toLocaleDateString(\"en-US\")\r\n            })\r\n        }\r\n\r\n        fetch(\"/player\", params);\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <Modal show={true}>\r\n                <Modal.Body className={this.props.dark ? \"dark-modal\" : \"\"}>\r\n                    <img className=\"finish\"\r\n                        alt=\"Try harder.\"\r\n                        src={bad}\r\n                    ></img>\r\n                    <h1 className=\"try-harder\" tabIndex={1}>Try Harder.</h1>\r\n                    <Row className=\"results\"  tabIndex={1} aria-label={\"Speed: \" + this.props.speed + \"characters per second. Time: \" + this.props.time}>\r\n                        <Col xs={6}>\r\n                            <h4 className=\"result-column\"><b>Speed:</b> {`${this.props.speed} char/sec`}</h4>\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <h4 className=\"result-column\"><b>Time:</b> {this.props.time}</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"results\">\r\n                        <Col xs={6}>\r\n                            <Form.Control className={this.props.dark ? \"dark-input\" : \"\"} placeholder=\"Name\" onChange={(e: any) => this.handleFormChange(e)} value={this.state.name} />\r\n                        </Col>\r\n                        <Col xs={6}>\r\n                            <Link to=\"/leaderboard\" tabIndex={-1}>\r\n                                <Button onClick={this.sendStats} variant=\"primary\" className=\"submit-button\">Ok</Button>\r\n                            </Link>\r\n                        </Col>\r\n                    </Row>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport Insult, {InsultState} from \"../components/Insult/Insult\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Timer from \"../components/Timer/Timer\";\r\nimport { FinishModal } from \"../components/Finish/FinishModal\";\r\n\r\nimport logo from \"../resources/keyboardWarriorWhite.png\";\r\n\r\nimport \"./typingPage.css\";\r\n\r\nexport interface TypingProps {\r\n    insults: string[];\r\n    dark: boolean;\r\n}\r\n\r\nexport interface TypingState {\r\n    currentInsult: number;\r\n    typedText: string;\r\n    isFinished: boolean;\r\n}\r\n\r\n// game page where players type insults as quickly as possible\r\nclass TypingPage extends React.Component<TypingProps, TypingState> {\r\n    _timer: React.RefObject<Timer>;\r\n\r\n    constructor(props: TypingProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentInsult: 0,\r\n            typedText: \"\",\r\n            isFinished: false\r\n        };\r\n\r\n        this._timer = React.createRef();\r\n        this.textChanged = this.textChanged.bind(this);\r\n    }\r\n\r\n    // handles change of text in text box\r\n    textChanged(e: React.FormEvent<HTMLInputElement>) {\r\n        const currentText = e.currentTarget.value;\r\n        const {currentInsult} = this.state;\r\n\r\n        this.setState({typedText: currentText});\r\n\r\n        // determine if insult is complete\r\n        if(currentText === this.props.insults[currentInsult]) {\r\n            this.setState({\r\n                currentInsult: currentInsult + 1,\r\n                typedText: \"\"\r\n            });\r\n\r\n            // stop timer if the last insult was completed\r\n            if(this.props.insults.length === currentInsult + 1) {\r\n                this._timer.current!.stop();\r\n                this.setState({\r\n                    isFinished: true,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleCopyAndPaste(e: React.ClipboardEvent<HTMLInputElement>): void {\r\n        e.preventDefault();\r\n        e.nativeEvent.stopImmediatePropagation();\r\n    }\r\n\r\n    render() {\r\n        const {currentInsult, typedText} = this.state;\r\n        \r\n        return (\r\n            <div>\r\n                <Navbar bg=\"dark\" variant=\"dark\" tabIndex={-1}>\r\n                    <Navbar.Brand href={process.env.PUBLIC_URL} tabIndex={1} aria-label=\"Back to home page\">\r\n                        <img\r\n                            alt=\"Keyboard Warriors\"\r\n                            src={logo}\r\n                            width=\"30\"\r\n                            height=\"30\"\r\n                            className=\"d-inline-block align-top\"\r\n                        />{' '}\r\n                        Keyboard Warriors\r\n                    </Navbar.Brand>\r\n                </Navbar>\r\n                {/* Calculate typing speed by joining array into string and dividing it by time */}\r\n                {this.state.isFinished && <FinishModal \r\n                    time={this._timer.current!.getTimeString()}\r\n                    dark={this.props.dark}\r\n                    speed={Number((this.props.insults.join().length / (this._timer.current!.getTime() / 100)).toFixed(2))} \r\n                />}\r\n                <Container className=\"typing-container\">\r\n                    <Timer dark={this.props.dark} ref={this._timer}/>\r\n                    {this.props.insults.map((insult, index) => {\r\n                        let state = (index < currentInsult ? InsultState.COMPLETE \r\n                            : (index === currentInsult ? InsultState.CURRENT : InsultState.UPCOMING));\r\n                        return <Insult key={insult} text={insult} state={state} typedText={typedText}/>\r\n                    })}\r\n                    <Row className=\"justify-content-md-center input-box\" tabIndex={-1}>\r\n                        <input\r\n                            autoFocus\r\n                            className={this.props.dark ? \"dark-input\" : \"\"}\r\n                            onChange={this.textChanged}\r\n                            value={typedText}\r\n                            onCopy={this.handleCopyAndPaste} \r\n                            onPaste={this.handleCopyAndPaste}\r\n                            aria-label={this.props.insults.toString()}\r\n                            tabIndex={1}\r\n                        />\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TypingPage;\r\n","import React from \"react\";\r\nimport kbWarriorsLogo from \"../resources/keyboardWarriors.png\";\r\nimport kbWarriorsLightLogo from \"../resources/keyboardWarriorWhite.png\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {Link} from 'react-router-dom';\r\nimport \"./index.css\";\r\n\r\ninterface LandingProps {\r\n  dark: boolean\r\n}\r\nexport class LandingPage extends React.Component<LandingProps> {\r\n  componentDidMount() {\r\n    document.title = \"Keyboard Warriors\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container className={\"landing-container \" + (this.props.dark ? \"dark\" : \"\")} tabIndex={1} aria-label=\"Keyboard Warriors landing page\">\r\n        {this.props.dark ? <img className=\"logo\" src={kbWarriorsLightLogo} alt=\"A white and orange helmet\"/> : <img className=\"logo\" src={kbWarriorsLogo} alt=\"A black and orange helmet\"/>}\r\n        <h1 className={\"title\" + (this.props.dark ? \" dark-text\" : \"\")} aria-label=\"Keyboard Warriors\">Keyboard Warriors</h1>\r\n        <Row className=\"justify-content-md-center button-row\">\r\n          <Col xs={3} lg={2}>\r\n            <Link to=\"/fight\" tabIndex={-1}>\r\n              <Button className=\"fight-button landing-button\" variant=\"primary\" aria-label=\"Fight\">\r\n                Fight!\r\n              </Button>\r\n            </Link>\r\n          </Col>\r\n          <Col xs={{span: 3, offset: 1}} lg={{span: 2, offset: 1}}>\r\n            <Link to=\"/leaderboard\" tabIndex={-1}>\r\n              <Button className=\"leaderboard-button landing-button\" variant=\"primary\" aria-label=\"Leader board\">\r\n                Leaderboard\r\n              </Button>\r\n            </Link>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Leaderboard.css';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nexport interface LeaderboardProps {\r\n    dark: boolean\r\n}\r\n\r\nexport interface LeaderboardState {\r\n    records: Array<Record>;\r\n}\r\n\r\nexport interface Record {\r\n    name: string;\r\n    speed: number;\r\n}\r\n\r\nexport class Leaderboard extends React.Component<LeaderboardProps, LeaderboardState> {\r\n    constructor(props: LeaderboardProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            records: []\r\n        };\r\n\r\n        this.generateLeaderboard = this.generateLeaderboard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('/leaderboard')\r\n            .then(res => res.json())\r\n            .then(ranks => {\r\n                this.setState({records: ranks.Player});\r\n            });\r\n    }\r\n\r\n    generateLeaderboard() {\r\n        return this.state.records.map((record, index) => {\r\n            const ariaLabel = \"Rank \" + (index + 1) + \". Initials \" + record.name + \". Speed \" + record.speed + \" characters per second\";\r\n            return (\r\n            <tr key={record.name + record.speed} tabIndex={1} aria-label={ariaLabel}>\r\n                <td>{ index + 1 }</td>\r\n                <td>{ record.name }</td>\r\n                <td>{ record.speed + \" char/sec\" }</td>\r\n            </tr>) \r\n         });\r\n    }\r\n\r\n\r\n    render() {\r\n      return (\r\n          <div className=\"leaderboard-container\" tabIndex={1} aria-label=\"Leader board\">\r\n              <h2 className=\"leaderboard-title\">Leaderboard</h2>\r\n              <div className=\"leaderboard-table\">\r\n                <Table className={this.props.dark ? \"dark-table\" : \"\"} borderless striped responsive=\"sm\">\r\n                    <thead tabIndex={1} aria-label=\"Rank, initials, and typing speed\">\r\n                        <tr>\r\n                            <th>Rank</th>\r\n                            <th>Initials</th>\r\n                            <th>Speed</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.generateLeaderboard()}\r\n                    </tbody>\r\n                </Table>\r\n              </div>\r\n          </div>\r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport kbWarriorsLogo from \"../resources/keyboardWarriors.png\";\r\nimport kbWarriorsLightLogo from \"../resources/keyboardWarriorWhite.png\"\r\nimport { Leaderboard } from '../components/Leaderboard/Leaderboard';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Image from 'react-bootstrap/Image';\r\n\r\nimport logo from \"../resources/keyboardWarriors.png\";\r\n\r\nimport './LeaderboardPage.css';\r\n\r\nexport interface LeaderboardProps {\r\n  dark: boolean;\r\n}\r\nexport class LeaderboardPage extends React.Component<LeaderboardProps> {\r\n    componentWillUpdate(prevProps: any, prevState: any, snapshot: any){\r\n      if(this.props.dark !== prevProps.dark){\r\n        this.forceUpdate();\r\n      }\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className={this.props.dark ? \"dark\" : \"\"}>\r\n          <Navbar bg=\"dark\" variant=\"dark\" tabIndex={-1}>\r\n            <Navbar.Brand href={process.env.PUBLIC_URL} tabIndex={1} aria-label=\"Back to home page\">\r\n              <img\r\n                alt=\"Keyboard Warriors\"\r\n                src={kbWarriorsLightLogo}\r\n                width=\"30\"\r\n                height=\"30\"\r\n                className=\"d-inline-block align-top\"\r\n              />{' '}\r\n              Keyboard Warriors\r\n            </Navbar.Brand>\r\n          </Navbar>\r\n          <div className=\"leaderboard-page-content\">\r\n            <Image className=\"background-logo\" src={this.props.dark ? kbWarriorsLightLogo : kbWarriorsLogo} alt=\"A black and orange helmet\" />\r\n            <Leaderboard dark={this.props.dark}/>\r\n          </div>\r\n        </div>  \r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport './App.css';\r\nimport TypingPage from \"./TypingPage/TypingPage\";\r\nimport {LandingPage} from \"./LandingPage/LandingPage\";\r\nimport {LeaderboardPage} from \"./LeaderboardPage/LeaderboardPage\";\r\nimport sun from \"./resources/sun.svg\";\r\nimport moon from \"./resources/night.svg\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route\r\n} from 'react-router-dom';\r\n\r\ninterface MyProps {}\r\ninterface MyState {\r\n  testState: string,\r\n  insults: string[],\r\n  dark: boolean\r\n}\r\n\r\nclass App extends React.Component<MyProps, MyState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      testState: \"save\",\r\n      insults: [],\r\n      dark: localStorage.getItem(\"darkMode\") ? localStorage.getItem(\"darkMode\") === \"true\" : false \r\n    }\r\n\r\n    this.toggleTheme = this.toggleTheme.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('/insults')\r\n      .then(res => res.json())\r\n      .then(insults => {\r\n          this.setState({insults: insults});\r\n      });\r\n  }\r\n\r\n  toggleTheme(e: any): void {\r\n    e.preventDefault();\r\n    //Set localStorage in callback because setState is async\r\n    this.setState({\r\n      dark: !this.state.dark\r\n    }, () => {\r\n      localStorage.setItem(\"darkMode\", this.state.dark ? \"true\" : \"false\");\r\n    });    \r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n        <div className={this.state.dark ? \"App dark\" : \"App\"}>\r\n          <header className=\"App-header\">\r\n          </header>\r\n          <Router basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n              <Route exact path={'/'}>\r\n                <LandingPage dark={this.state.dark} />\r\n              </Route>\r\n              <Route exact path={'/fight'}>\r\n                <TypingPage dark={this.state.dark} insults={this.state.insults} />\r\n              </Route>\r\n              <Route exact path={'/leaderboard'}>\r\n                <LeaderboardPage dark={this.state.dark} />\r\n              </Route>\r\n            </Switch>\r\n          </Router>\r\n          {\r\n            this.state.dark ? <img className=\"mode-toggle dark\" onClick={this.toggleTheme} onKeyPress={this.toggleTheme} src={sun} alt={'A sun'} tabIndex={1} aria-label=\"Toggle for light mode\"></img> :\r\n            <img className=\"mode-toggle\" onClick={this.toggleTheme} onKeyPress={this.toggleTheme} src={moon} alt={'A cloudy moon'} tabIndex={1} aria-label=\"Toggle for dark mode\"></img>\r\n          }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}